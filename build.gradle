defaultTasks 'hello', 'upper'
description = '项目描述'
task hello {
    doLast {
        println 'Hello world!'
    }
}
hello.doFirst {
    println 'Hello Venus'
}
hello.doLast {
    println "Greetings from the $hello.name task."
}
tasks.create(name: 'hello',overwrite: true) {
    description 'task de script ion'
    println 'Hello world22!'
}

task upper {
    String someString = 'mY_nAmE'
    println "Original: " + someString
    println "Upper case: " + someString.toUpperCase()
}
upper.onlyIf { !project.hasProperty('skipupper')}
//> gradle hello -PskipHello

task count {
    4.times { print "$it " }
4.times { counter ->
    task "task$counter" {
        println "I'm task number $counter"
    }
}	
task0.dependsOn task2,task3
}

task intro(dependsOn: hello) {
    println "I'm Gradle"
}
task myTask {
    ext.myProperty = "myValue"
}

task printTaskProperties {
    println myTask.myProperty
}
def version
gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(release)) {
        version = '1.0'
    } else {
        version = '1.0-SNAPSHOT'
    }
}
task distribution {
    println "We build the zip with version=$version"
}
task release(dependsOn: 'distribution') {
    println 'We release now'
}
println version
task check2{
	println name;
	println project.name;
	//println project.path;
	println project.projectDir;
	println project.buildDir;
	println hello.name;
	println project.hello.name;
println tasks.hello.name
println tasks['hello'].name 
}
def dest = "dest2"
task copy(type: Copy) {
    from "source"
    into dest
    println dest
}
apply plugin: "java"

ext {
    springVersion = "3.1.0.RELEASE"
    emailNotification = "build@master.org"
}
sourceSets.all { ext.purpose = null }
sourceSets {
    main {
        purpose = "production"
    }
    test {
        purpose = "test"
    }
    plugin {
        purpose = "production"
    }
}
task printProperties {
    println springVersion
    println emailNotification
    sourceSets.matching { it.purpose == "production" }.each { println it.name }
}   

def classesDir = new File('build/classes')
task resources {
    classesDir.mkdirs()
    // do something
}
task compile(dependsOn: 'resources') {
    if (classesDir.isDirectory()) {
        println 'The class directory exists. I can operate'
    }
    // do something
}  
//task printProps {
//    println commandLineProjectProp
  //  println gradlePropertiesProp
   // println systemProjectProp
   // println envProjectProp
   // println System.properties['system']
//}
//gradle -q -PcommandLineProjectProp=commandLineProjectPropValue -Dorg.gradle.project.systemProjectProp=systemPropertyValue printProps
apply from: 'other.gradle'    
task configure {
    def pos = configure(new java.text.FieldPosition(10)) {
        beginIndex = 1
        endIndex = 5
    }
//pos = new java.text.FieldPosition(10)
    // Apply the script
    //apply from: 'other.gradle', to: pos
    println pos
    println pos.beginIndex
    println pos.endIndex
}

//logger.error('An error log message.')
//logger.warn('A warning log message.')
//logger.lifecycle('A lifecycle info log message.')
/*logger.trace('A trace log message.')    
logger.info('An info log message.')
logger.debug('A debug log message.')
logger.quiet('An info log message which is always logged.')

import org.slf4j.Logger
import org.slf4j.LoggerFactory
Logger slf4jLogger = LoggerFactory.getLogger('some-logger')
slf4jLogger.info('An info log message logged using SLF4j')  
logging.captureStandardOutput LogLevel.INFO
println 'A message which is logged at INFO level'  

task logInfo {
    logging.captureStandardOutput LogLevel.INFO
    doFirst {
        println 'A task message which is logged at INFO level'
    }
}
*/  
//gradle -I init.gradle build

//apply plugin: org.gradle.api.plugins.JavaPlugin  

apply plugin: JavaPlugin  
task show {
    println relativePath(compileJava.destinationDir)
    println relativePath(processResources.destinationDir)
}  

apply plugin: 'java'
compileJava.destinationDir = file("$buildDir/output/classes")
task show2 {
    println relativePath(compileJava.destinationDir)
    println 'end:mygralde------------------------------------------'
}

 
